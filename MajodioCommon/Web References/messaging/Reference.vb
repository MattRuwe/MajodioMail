'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace messaging
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="messagingSoap", [Namespace]:="http://messaging.majodio.com/messaging.asmx")>  _
    Partial Public Class messaging
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private PingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendFeedbackOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNewDeliverableMessageIdsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDeliverableMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://messaging.majodio.com/messaging.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event PingCompleted As PingCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertMessageCompleted As InsertMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event SendFeedbackCompleted As SendFeedbackCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNewDeliverableMessageIdsCompleted As GetNewDeliverableMessageIdsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDeliverableMessageCompleted As GetDeliverableMessageCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://messaging.majodio.com/messaging.asmx/Ping", RequestNamespace:="http://messaging.majodio.com/messaging.asmx", ResponseNamespace:="http://messaging.majodio.com/messaging.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Ping(ByVal Product As String, ByVal Version As String)
            Me.Invoke("Ping", New Object() {Product, Version})
        End Sub
        
        '''<remarks/>
        Public Function BeginPing(ByVal Product As String, ByVal Version As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Ping", New Object() {Product, Version}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndPing(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PingAsync(ByVal Product As String, ByVal Version As String)
            Me.PingAsync(Product, Version, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PingAsync(ByVal Product As String, ByVal Version As String, ByVal userState As Object)
            If (Me.PingOperationCompleted Is Nothing) Then
                Me.PingOperationCompleted = AddressOf Me.OnPingOperationCompleted
            End If
            Me.InvokeAsync("Ping", New Object() {Product, Version}, Me.PingOperationCompleted, userState)
        End Sub
        
        Private Sub OnPingOperationCompleted(ByVal arg As Object)
            If (Not (Me.PingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PingCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://messaging.majodio.com/messaging.asmx/InsertMessage", RequestNamespace:="http://messaging.majodio.com/messaging.asmx", ResponseNamespace:="http://messaging.majodio.com/messaging.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub InsertMessage(ByVal MsgType As String, ByVal Msg As String)
            Me.Invoke("InsertMessage", New Object() {MsgType, Msg})
        End Sub
        
        '''<remarks/>
        Public Function BeginInsertMessage(ByVal MsgType As String, ByVal Msg As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("InsertMessage", New Object() {MsgType, Msg}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndInsertMessage(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertMessageAsync(ByVal MsgType As String, ByVal Msg As String)
            Me.InsertMessageAsync(MsgType, Msg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertMessageAsync(ByVal MsgType As String, ByVal Msg As String, ByVal userState As Object)
            If (Me.InsertMessageOperationCompleted Is Nothing) Then
                Me.InsertMessageOperationCompleted = AddressOf Me.OnInsertMessageOperationCompleted
            End If
            Me.InvokeAsync("InsertMessage", New Object() {MsgType, Msg}, Me.InsertMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertMessageCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://messaging.majodio.com/messaging.asmx/SendFeedback", RequestNamespace:="http://messaging.majodio.com/messaging.asmx", ResponseNamespace:="http://messaging.majodio.com/messaging.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SendFeedback(ByVal Product As String, ByVal Email As String, ByVal Name As String, ByVal Message As String)
            Me.Invoke("SendFeedback", New Object() {Product, Email, Name, Message})
        End Sub
        
        '''<remarks/>
        Public Function BeginSendFeedback(ByVal Product As String, ByVal Email As String, ByVal Name As String, ByVal Message As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendFeedback", New Object() {Product, Email, Name, Message}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndSendFeedback(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendFeedbackAsync(ByVal Product As String, ByVal Email As String, ByVal Name As String, ByVal Message As String)
            Me.SendFeedbackAsync(Product, Email, Name, Message, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendFeedbackAsync(ByVal Product As String, ByVal Email As String, ByVal Name As String, ByVal Message As String, ByVal userState As Object)
            If (Me.SendFeedbackOperationCompleted Is Nothing) Then
                Me.SendFeedbackOperationCompleted = AddressOf Me.OnSendFeedbackOperationCompleted
            End If
            Me.InvokeAsync("SendFeedback", New Object() {Product, Email, Name, Message}, Me.SendFeedbackOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendFeedbackOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendFeedbackCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendFeedbackCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://messaging.majodio.com/messaging.asmx/GetNewDeliverableMessageIds", RequestNamespace:="http://messaging.majodio.com/messaging.asmx", ResponseNamespace:="http://messaging.majodio.com/messaging.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNewDeliverableMessageIds(ByVal Product As String, ByVal Version As String, ByVal LatestMessageId As Integer) As Integer()
            Dim results() As Object = Me.Invoke("GetNewDeliverableMessageIds", New Object() {Product, Version, LatestMessageId})
            Return CType(results(0),Integer())
        End Function
        
        '''<remarks/>
        Public Function BeginGetNewDeliverableMessageIds(ByVal Product As String, ByVal Version As String, ByVal LatestMessageId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetNewDeliverableMessageIds", New Object() {Product, Version, LatestMessageId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetNewDeliverableMessageIds(ByVal asyncResult As System.IAsyncResult) As Integer()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNewDeliverableMessageIdsAsync(ByVal Product As String, ByVal Version As String, ByVal LatestMessageId As Integer)
            Me.GetNewDeliverableMessageIdsAsync(Product, Version, LatestMessageId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNewDeliverableMessageIdsAsync(ByVal Product As String, ByVal Version As String, ByVal LatestMessageId As Integer, ByVal userState As Object)
            If (Me.GetNewDeliverableMessageIdsOperationCompleted Is Nothing) Then
                Me.GetNewDeliverableMessageIdsOperationCompleted = AddressOf Me.OnGetNewDeliverableMessageIdsOperationCompleted
            End If
            Me.InvokeAsync("GetNewDeliverableMessageIds", New Object() {Product, Version, LatestMessageId}, Me.GetNewDeliverableMessageIdsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNewDeliverableMessageIdsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNewDeliverableMessageIdsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNewDeliverableMessageIdsCompleted(Me, New GetNewDeliverableMessageIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://messaging.majodio.com/messaging.asmx/GetDeliverableMessage", RequestNamespace:="http://messaging.majodio.com/messaging.asmx", ResponseNamespace:="http://messaging.majodio.com/messaging.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDeliverableMessage(ByVal MessageId As Integer) As String
            Dim results() As Object = Me.Invoke("GetDeliverableMessage", New Object() {MessageId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDeliverableMessage(ByVal MessageId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDeliverableMessage", New Object() {MessageId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDeliverableMessage(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDeliverableMessageAsync(ByVal MessageId As Integer)
            Me.GetDeliverableMessageAsync(MessageId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDeliverableMessageAsync(ByVal MessageId As Integer, ByVal userState As Object)
            If (Me.GetDeliverableMessageOperationCompleted Is Nothing) Then
                Me.GetDeliverableMessageOperationCompleted = AddressOf Me.OnGetDeliverableMessageOperationCompleted
            End If
            Me.InvokeAsync("GetDeliverableMessage", New Object() {MessageId}, Me.GetDeliverableMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDeliverableMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDeliverableMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDeliverableMessageCompleted(Me, New GetDeliverableMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub PingCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub InsertMessageCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SendFeedbackCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetNewDeliverableMessageIdsCompletedEventHandler(ByVal sender As Object, ByVal e As GetNewDeliverableMessageIdsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNewDeliverableMessageIdsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetDeliverableMessageCompletedEventHandler(ByVal sender As Object, ByVal e As GetDeliverableMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDeliverableMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
